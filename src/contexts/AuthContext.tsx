import React, { createContext, useContext, useState, useEffect } from 'react';
import { CandidateData } from '../types';
import usersData from '../data/users.json';

interface AuthContextType {
  currentUser: string | null;
  login: (username: string, password: string) => boolean;
  logout: () => void;
  isAuthenticated: boolean;
  saveUserData: (data: CandidateData) => void;
  loadUserData: () => CandidateData | null;
  getUserPersonalInfo: () => any;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [currentUser, setCurrentUser] = useState<string | null>(null);

  useEffect(() => {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
      setCurrentUser(savedUser);
    }
  }, []);

  const login = (username: string, password: string): boolean => {
    // Check credentials - using the usernames from users.json
    const validUsers = [
      'Candidate7K9M', 'Candidate3X7Q', 'Candidate9P2R', 'Candidate5F8W', 'Candidate1N4T',
      'Candidate6H3Y', 'Candidate2L9V', 'Candidate8D5B', 'Candidate4Z6C', 'Candidate0J1E',
      'CandidateM8X2', 'CandidateQ3Z7', 'CandidateA9R1', 'CandidateT4P5', 'CandidateK6W7',
      'CandidateB9F1', 'CandidateE8L2', 'CandidateY5U3', 'CandidateS4H6', 'CandidateN7C8'
    ];

    if (validUsers.includes(username) && password === 'OnboardSecure2024!') {
      setCurrentUser(username);
      localStorage.setItem('currentUser', username);
      return true;
    }
    return false;
  };

  const logout = () => {
    setCurrentUser(null);
    localStorage.removeItem('currentUser');
  };

  const saveUserData = (data: CandidateData) => {
    if (currentUser) {
      // Save individual user data to localStorage
      const key = `userData_${currentUser}`;
      localStorage.setItem(key, JSON.stringify(data));
      
      // Auto-save to text file when legal phase is completed
      if (data.legal?.consentCheck || data.legal?.transactionId) {
        autoSaveToTextFile(data);
      }
    }
  };

  const autoSaveToTextFile = (userData: CandidateData) => {
    const app = userData.application;
    const identity = userData.identity;
    const legal = userData.legal;
    
    const completionStatus = legal?.transactionId ? 'COMPLETED' : 'IN PROGRESS';
    const timestamp = new Date().toLocaleString();
    
    const textContent = `
==========================================
MIEBACH VENTURES - CANDIDATE RECORD
==========================================
Generated: ${timestamp}
Username: ${currentUser}
Reference ID: ${userData.candidateId || 'Not assigned'}
Status: ${completionStatus}
==========================================

PERSONAL INFORMATION:
• Full Name: ${app?.firstName || ''} ${app?.lastName || ''}
• Username: ${currentUser}

APPLICATION DETAILS:
• Email: ${app?.email || 'Not provided'}
• Phone: ${app?.phone || 'Not provided'}
• Address: ${app?.address || 'Not provided'}
• Salary Acceptable: ${app?.salaryAcceptable ? 'Yes' : 'No'}
• Salary Request: ${app?.salaryRequest || 'Not provided'}

IDENTITY VERIFICATION:
• Emergency Contact: ${identity?.emergencyName || 'Not provided'}
• Emergency Relation: ${identity?.emergencyRelation || 'Not provided'}
• Emergency Phone: ${identity?.emergencyPhone || 'Not provided'}
• Emergency Email: ${identity?.emergencyEmail || 'Not provided'}

LEGAL & COMPLIANCE:
• Background Check Consent: ${legal?.consentCheck ? '✓ YES' : '✗ NO'}
• Payment Consent: ${legal?.paymentConsent ? '✓ YES' : '✗ NO'}
• Transaction ID: ${legal?.transactionId || 'Not processed'}
• LTC Amount: ${legal?.ltcAmount || 'Not processed'}
• Salary Agreement: $2,300 bi-weekly ($59,800 annually)

COMPLETION STATUS: ${completionStatus}
Submission Date: ${userData.submissionDate || 'Not submitted'}
Completion Date: ${userData.completionDate || 'Not completed'}

==========================================
CONFIDENTIAL CANDIDATE INFORMATION
This file was automatically generated by
GitMatcher Onboarding System
==========================================
`;

    // Note: Data is now automatically saved to Google Sheets
    console.log(`✅ Candidate record processed for: ${currentUser}`);
  };

  const loadUserData = (): CandidateData | null => {
    if (currentUser) {
      const key = `userData_${currentUser}`;
      const savedData = localStorage.getItem(key);
      if (savedData) {
        return JSON.parse(savedData);
      }
    }
    return null;
  };

  const getUserPersonalInfo = () => {
    if (currentUser) {
      const user = usersData.users.find(u => u.username === currentUser);
      return user?.personalInfo || null;
    }
    return null;
  };

  const value = {
    currentUser,
    login,
    logout,
    isAuthenticated: !!currentUser,
    saveUserData,
    loadUserData,
    getUserPersonalInfo
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;
